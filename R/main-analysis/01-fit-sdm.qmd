---
title: "Fit density models to cod of different sizes"
author: "Max Lindmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Load packages & source functions

```{r load libraries}
#| cache: false
#| message: false
#| warning: false
#| code-fold: true

library(tidyverse)
library(RCurl)
library(viridis)
library(devtools)
library(sdmTMBextra)
library(tictoc)
library(tidylog)
library(sdmTMB)

# Source code for map plots
# You need: # devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/maxlindmark/pred-prey-overlap/main/R/functions/map-plot.R")

# Set path
home <- here::here()
```

```{r load cache}
# To load entire cache in interactive r session, do: 
# qwraps2::lazyload_cache_dir(path = paste0(home, "/R/main-analysis/01-fit-sdm_cache/html"))
```

## Read and scale data

```{r read biomass data}
#| cache: false
#| message: false

# Read & scale data
d <- read_csv(paste0(home, "/data/clean/catch_clean.csv")) |> 
  rename(X = x, Y = y) |> 
  drop_na(depth, oxy, salinity, temp) |> 
  mutate(year_f = as.factor(year),
         quarter_f = as.factor(quarter),
         month_f = as.factor(month)) |> 
  mutate(across(.cols = c("temp", "salinity", "oxy", "depth"),
                .fns = scale,
                .names = "{.col}_sc")) |> 
  mutate(temp_sq = temp_sc^2,
         oxy_sq = oxy_sc^2,
         depth_sq = depth_sc^2,)
```

## Create mesh

```{r}
#| cache: false
mesh <- make_mesh(d,
                  xy_cols = c("X", "Y"),
                  cutoff = 15)

ggplot() +
  inlabru::gg(mesh$mesh) +
  coord_fixed() +
  geom_point(aes(X, Y), data = d, alpha = 0.2, size = 0.5) +
  annotate("text", -Inf, Inf, label = paste("n knots = ", mesh$mesh$n), hjust = -0.3, vjust = 3) + 
  labs(x = "Easting (km)", y = "Northing (km)")

ggsave(paste0(home, "/figures/supp/density_mesh.pdf"), width = 14, height = 14, units = "cm")
```

## Classic delta/hurdle model

```{r com cod delta}
tic()
mcod <- sdmTMB(cod_com ~ 0 + year_f + quarter_f + salinity_sc + temp_sc + temp_sq + depth_sc + depth_sq + breakpt(oxy_sc),
               data = d,
               mesh = mesh,
               family = delta_gamma(link1 = "logit", link2 = "log"),
               spatiotemporal = "IID",
               spatial = "off",
               spatial_varying = ~0 + quarter_f,
               time = "year")
toc()
sanity(mcod)
summary(mcod) # check the range in relation to cutoff!
```

Residuals

```{r residuals com}
tic()
samps1 <- sdmTMBextra::predict_mle_mcmc(mcod, mcmc_iter = 201, mcmc_warmup = 200, model = 1)
samps2 <- sdmTMBextra::predict_mle_mcmc(mcod, mcmc_iter = 201, mcmc_warmup = 200, model = 2)

d$mcmc_res1 <- as.vector(residuals(mcod, type = "mle-mcmc", mcmc_samples = samps1, model = 1))
d$mcmc_res2 <- as.vector(residuals(mcod, type = "mle-mcmc", mcmc_samples = samps2, model = 2))
toc() 

d |>
  rename(Binomial = mcmc_res1,
         Gamma = mcmc_res2) |> 
  pivot_longer(c(Binomial, Gamma)) |> 
  ggplot(aes(sample = value)) +
  stat_qq(size = 0.75, shape = 21, fill = NA) +
  stat_qq_line() +
  facet_wrap(~name) + 
  labs(y = "Sample Quantiles", x = "Theoretical Quantiles") +
  theme(aspect.ratio = 1)

ggsave(paste0(home, "/figures/supp/qq_cod_sdm.pdf"), width = 17, height = 11, units = "cm")
```

## Poisson link model

```{r}
tic()
mcodpl <- sdmTMB(cod_com ~ 0 + year_f + quarter_f + salinity_sc + temp_sc + temp_sq + depth_sc + depth_sq + breakpt(oxy_sc),
                 data = d,
                 mesh = mesh,
                 family = delta_gamma(type = "poisson-link"),
                 spatiotemporal = "IID",
                 spatial = "off",
                 spatial_varying = ~0 + quarter_f,
                 time = "year")
toc()
sanity(mcodpl)
summary(mcodpl) # check the range in relation to cutoff!
```

Residuals

```{r residuals pl com}
# tic()
# samps1_pl <- sdmTMBextra::predict_mle_mcmc(mcodpl, mcmc_iter = 201, mcmc_warmup = 200, model = 1)
# samps2_pl <- sdmTMBextra::predict_mle_mcmc(mcodpl, mcmc_iter = 201, mcmc_warmup = 200, model = 2)
# 
# d$mcmc_res1_pl <- as.vector(residuals(mcodpl, type = "mle-mcmc", mcmc_samples = samps1_pl, model = 1))
# d$mcmc_res2_pl <- as.vector(residuals(mcodpl, type = "mle-mcmc", mcmc_samples = samps2_pl, model = 2))
# toc()
# 
# d |>
#   rename(Binomial = mcmc_res1_pl,
#          Gamma = mcmc_res2_pl) |> 
#   pivot_longer(c(Binomial, Gamma)) |> 
#   ggplot(aes(sample = value)) +
#   stat_qq(size = 0.75, shape = 21, fill = NA) +
#   stat_qq_line() +
#   facet_wrap(~name) + 
#   labs(y = "Sample Quantiles", x = "Theoretical Quantiles") +
#   theme(aspect.ratio = 1)

#ggsave(paste0(home, "/figures/supp/qq_cod_sdm_pl.pdf"), width = 17, height = 11, units = "cm")
```

```{r}
# save model object:
saveRDS(mcod, paste0(home, "/output/mcod.rds"))
```
