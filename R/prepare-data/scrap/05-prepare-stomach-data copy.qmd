---
title: "Prepare stomach content data"
author: "Max Lindmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
    fig-width: 8
    #fig-asp: 0.618
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Load libraries

```{r libs}
#| message: false
#| warning: false
library(tidyverse)
library(tidylog)
library(janitor)
library(devtools)
library(sdmTMB)
library(patchwork)
library(terra)

# Import some plotting functions
# Source code for map plots
# You need: # devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/maxlindmark/pred-prey-overlap/main/R/functions/map-plot.R")
options(ggplot2.continuous.colour = "viridis")

# Set path
home <- here::here()
```

## Read data

I downloaded stomach data from the Baltic, all countries, from year 1993-now, on the morning of Sep 22nd. I see lots of new and old data missing. Here's a test script to prepare those data. Text in red are warnings/questions from me.

In our case study, we want to create a response variable that is the weight ratio of saduria, herring and sprat (separately) to cod weight. Hence we need, per predator, the total weight of these species, and if they are absent, weight should be 0. We also need coordinates for these stomachs. To get there, we need to do the follow:

1. Join all data sets
2. Filter predators with the above prey present and calculate the total weight of these for each predator
3. Filter predators where these prey are not present.
4. Bind rows, and replace NA with 0

```{r}
#| eval: false
#| echo: false
# read_ICES_format <- function(data_dir='.',
#                              file_inf="File_information.csv",
#                              haul_inf="HaulInformation.csv",
#                              pred_inf="PredatorInformation.csv",
#                              prey_inf="PreyInformation.csv"){
#  
#   # test data_dir=stoms; file_inf="File_information.csv";haul_inf="HaulInformation.csv";pred_inf="PredatorInformation.csv";prey_inf="PreyInformation.csv"
#  
#   ff<-  readr::read_csv(file.path(data_dir,file_inf))
#   hh<-  readr::read_csv(file=file.path(data_dir,haul_inf))
#   pred<-readr::read_csv(file=file.path(data_dir,pred_inf)) %>% dplyr::rename(pred_notes=Notes,pred_l=Length)
#   prey<-readr::read_csv(file=file.path(data_dir,prey_inf)) %>% dplyr::rename(prey_notes=Notes,prey_l=Length)
#  
#   a1<-dplyr::left_join(ff,hh,by = join_by(tblUploadID))
#   a2<-dplyr::left_join(pred,prey, by = join_by(tblUploadID, tblHaulID, tblPredatorInformationID, Ship,
#                                                Gear, HaulNo, StationNumber, Year, Month, Day, Time, FishID, AphiaIDPredator))
#   a<-dplyr::left_join(a1,a2,by = join_by(tblUploadID, tblHaulID, Ship, Gear, HaulNo, StationNumber, Year, Month, Day, Time))
#   return(a)
# }
# a
# a <- read_ICES_format(data_dir = paste0(home, "/data/stomach/StomachContent_0914334172")) |> as.data.frame()
# a
# problems(a)
```

```{r read data}
fi <- read_csv(paste0(home, "/data/stomach/StomachContent_1004552818/File_information.csv"))
hi <- read_csv(paste0(home, "/data/stomach/StomachContent_1004552818/HaulInformation.csv"))
pred <- read_csv(paste0(home, "/data/stomach/StomachContent_1004552818/PredatorInformation.csv"))
prey <- read_csv(paste0(home, "/data/stomach/StomachContent_1004552818/PreyInformation.csv"))
```

Have a look at the data... The description of the data can be found here: <http://datsu.ices.dk/web/selRep.aspx?Dataset=157>

```{r quick glimpse}
names(fi)
names(hi)
names(pred)
names(prey)
```

## Join all data files
We do this specific order: fi -> hi -> pred -> prey.

For some joins, there are multiple column names shared in addition to the key. I suppose I could remove them and keep only the ID key and the non-shared columns, but in I could also keep them. First I need to ensure they are the same, and not only have the same name though. Will also check if both datasets have the same amount of NA before choosing which column to carry from which dataset.

```{r}
hi <- left_join(hi, fi, by = "tblUploadID")

comcol_hi_pred <- intersect(colnames(pred), colnames(hi))

# Check if any of the two datasets have NA in the common columns
unique(is.na(hi |> dplyr::select(all_of(comcol_hi_pred))))
unique(is.na(pred |> dplyr::select(all_of(comcol_hi_pred))))

# Nope, but the column Notes does have different meanings so we will remove that before joining
pred <- left_join(pred |> dplyr::select(-Notes),
                  hi |> dplyr::select(-Notes),
                  by = comcol_hi_pred[!comcol_hi_pred == "Notes"])
```

```{r}
# Quick test!
# ggplot(pred |> filter(!Year == 2018), aes(IndWgt)) + 
#   facet_wrap(~Country, scales = "free") + 
#   geom_histogram()
```

Now let's join predator data to prey data following the same procedure.

```{r}
intersect(colnames(pred), colnames(prey))

# Length is a common column, but it corresponds to predator or prey. Rename!
pred <- pred |> rename(pred_length = Length)
prey <- prey |> rename(prey_length = Length)

comcol_prey_pred <- intersect(colnames(pred), colnames(prey))
comcol_prey_pred

# Check if any of the two datasets have NA in the common columns
unique(is.na(pred |> dplyr::select(all_of(comcol_prey_pred))))
unique(is.na(prey |> dplyr::select(all_of(comcol_prey_pred))))

# Remove "Notes" from the prey data to avoid confusion as to which dataset it belongs.
unique(is.na(pred |> dplyr::select(Year, Month, HaulNo, Day, FishID)))
unique(is.na(prey |> dplyr::select(Year, Month, HaulNo, Day, FishID)))

# Alternatively, I can join using the comcol as in the last html I sent. That works for joining, but I still need a globally unique predator ID for my calculations later.
prey <- prey |> rename(prey_notes = Notes) |> mutate(fish_id = paste(Year, Month, HaulNo, Day, FishID, sep = "_"))
pred <- pred |> mutate(fish_id = paste(Year, Month, HaulNo, Day, FishID, sep = "_"))

length(unique(pred$tblPredatorInformationID))
length(unique(pred$fish_id))

# Remove regurgitated stomachs! (approx. 4%)
# TODO: in the Swedish data, 2 means regurgitated and 1 is intact, but for the rest, 1 means regurgitated, 0 or NA means intact...
pred <- pred |>
  mutate(Regurgitated_st = Regurgitated,
         Regurgitated_st = replace_na(Regurgitated_st, 0), 
         Regurgitated_st = ifelse(Country == "SE" & Regurgitated_st == 2, 1, Regurgitated_st))

# TODO: Here we can see that if we filter the prey file to only have the predators that have regurgitated stomachs, there are still prey-weights. So sometimes they are analyzed!
regurg_ids <- pred |>
  filter(!Regurgitated_st == 0)
prey |> filter(tblPredatorInformationID %in% c(regurg_ids$tblPredatorInformationID)) |> distinct(Weight, AphiaIDPrey) |> as.data.frame()

# Remove regurgitated stomachs
pred <- pred |>
  filter(Regurgitated_st == 0)

d <- left_join(prey, pred, by = c(comcol_prey_pred, "fish_id"))

# OK... 
# The pred_in_prey_not_pred are the regurgitated stomahcs, which I filter away. If I don't filter away these, there are no predators that only exist in the prey file
# pred_in_prey_not_pred <- prey |> filter(!tblPredatorInformationID %in% unique(pred2$tblPredatorInformationID)) |> as.data.frame()
# pred |> filter(tblPredatorInformationID %in% unique(pred_in_prey_not_pred$tblPredatorInformationID)) |> distinct(Regurgitated_st)

d |> 
  group_by(Regurgitated_st) |>
  summarise(n = n())

d <- d |>
  mutate(Regurgitated_st = Regurgitated,
         Regurgitated_st = replace_na(Regurgitated_st, 0), 
         Regurgitated_st = ifelse(Country == "SE" & Regurgitated_st == 2, 1, Regurgitated_st)) |> 
  filter(Regurgitated_st == 0)
  
d |> 
  group_by(Regurgitated_st) |>
  summarise(n = n())

# Check the predator id's that are not in the prey file. What do they have in common? They are all empty. 
# We will have two categories of empty: empty-empty, and empty with respect to sprat, herring and saduria.
empty_stom <- pred |> 
  filter(!tblPredatorInformationID %in% unique(prey$tblPredatorInformationID))

empty_stom |> 
  distinct(Regurgitated_st, StomachEmpty, StomachFullness, FullStomWgt, EmptyStomWgt)
```

## Calculate total weight of specific prey species by unique predator ID

Next we need to summarize our prey weights by predator and prey group. First filter stomachs where these prey are present. Create a new common name column to make life easier... 

```{r}
#| message: false
selected_prey_present <- d |> 
  mutate(common_prey_name = NA,
         common_prey_name = ifelse(AphiaIDPrey %in% c(293743, 1625944, 126425, 322683, 236448), "sprat", common_prey_name),
         common_prey_name = ifelse(AphiaIDPrey == 126417, "herring", common_prey_name),
         common_prey_name = ifelse(AphiaIDPrey %in% c(293511, 119034), "saduria", common_prey_name)) |> 
  filter(common_prey_name %in% c("sprat", "herring", "saduria"))

# I guess this is because they couldn't be counted only weighed
selected_prey_present |> distinct(Count) |> arrange(Count)

# TODO: How can count be 0? If it's impossible to count, it should be 0.
selected_prey_present |> filter(Count == 0)
```

Next we want to group by predator and prey, and summarize the total weight. Before though, we need to sort out NAs and 0s in prey weight (personally I think NAs make sense to have, but not 0's. The latter could be rounding errors because they are present, whereas the former could be because it simply wasn't weighed)

```{r}
zero_weights <- selected_prey_present |> filter(Weight == 0)

head(unique(zero_weights$tblPredatorInformationID))
unique(zero_weights$AnalysingOrg)

# 3140 	Institute of Food Safety, Animal Health and Environment (BIOR) 	EDMO 	False 	2015-02-06 	2022-08-30 
# 194 	National Marine Fisheries Research Institute (NMFRI) 	EDMO 	False 	2015-02-06 	2021-12-22 
# 2195 DTU Aqua, National Institute of Aquatic Resources, Technical University of Denmark 

zero_weights |>
  distinct(Count, prey_length)
```

[21% of rows where these prey are present do not have a weight...]{style="color:red"}. Do they have a length? Can we estimate Weight? If length is not `NA` and Weight is 0 or NA, estimate weight based on length and Count. Else give weight `NA` and drop it. Because these are not true empty, else there wouldn't be species-information

```{r}
# If we want to estimate weight... we need to know the count. In come cases, we have presences of these prey but no information for calculating the total weight
t <- selected_prey_present |> filter(Weight == 0 & Count == 0 & prey_length == 0)
t_na <- selected_prey_present |> filter(is.na(Weight) & is.na(Count) & is.na(prey_length))

# TODO: Is it really so that we should have prey info but no info on count or length or weight??
t |> distinct(Country, Year)
t_na |> distinct(Country, Year)

# Calculate weight of prey given count and prey length
selected_prey_present <- selected_prey_present |> 
  mutate(prey_length = ifelse(UnitLngt == "mm", prey_length/10, prey_length)) |> 
  mutate(Weight = replace_na(Weight, -9),
         Count = replace_na(Count, -9),
         prey_length = replace_na(prey_length, -9)) |> # Because we have a mix of negative values and NAs, I chose one of the two options
  mutate(prey_weight_source = ifelse(Weight <= 0 & prey_length > 0 & Count > 0 , "estimated", "observed")) |> 
  mutate(Weight = ifelse(prey_weight_source == "estimated", (0.01*prey_length^3)*Count, Weight))

t <- selected_prey_present |> filter(Weight <= 0)

# TODO: Even if we estimate the prey weight based on the length of the prey and the number of the prey, we still have 17% of rows in this data with saduria, herring and sprat that does not have any weight information, even though they were clearly present in the data. We can see that here:

t |> distinct(Country, Year)
t |> as.data.frame() |> head(20)

# I guess this is because they couldn't be measured or weighed or counted. Which seems fair. For our purpose, it would probably be less wrong to give them the average weight rather than treating them as 0s if we know the count (else we simply do not know based on length alone)

prey_avg_ind_weight <- selected_prey_present |> 
  filter(Weight > 0 & Count > 0) |>
  group_by(common_prey_name) |> 
  mutate(ind_weight = Weight / Count)

# Of course there are obvious issues....  
prey_avg_ind_weight |>
  ggplot(aes(ind_weight)) +
  facet_wrap(~common_prey_name, ncol = 3, scales = "free") +
  geom_histogram()

prey_avg_ind_weight |>
  ggplot(aes(Weight)) +
  facet_wrap(~common_prey_name, ncol = 3, scales = "free") +
  geom_histogram()

# TODO: 893 g sprat? Doubt it!
prey_avg_ind_weight |>
  filter(common_prey_name == "sprat") |> 
  filter(ind_weight > 100) |> as.data.frame() 

prey_avg_ind_weight |>
  filter(!tblPredatorInformationID == 44839) |> 
  ggplot(aes(ind_weight)) +
  facet_wrap(~common_prey_name, ncol = 3, scales = "free") +
  geom_histogram()

# Remove it, summarize and take average
prey_avg_ind_weight <- prey_avg_ind_weight |>
  filter(!tblPredatorInformationID == 44839) |> 
  group_by(common_prey_name) |> 
  summarise(avg_weight = mean(ind_weight))

prey_avg_ind_weight

# This should be the average prey weight which we can use to calculate the weight of these prey if we have the counts. Left join that summarized data and do the estimate of weight based on length. But first figure out which unit prey size is

# Join average weight and estimate weight
selected_prey_present_clean <- selected_prey_present |> 
  left_join(prey_avg_ind_weight) |> 
  mutate(Weight = ifelse(Weight <= 0 & Count > 0, Count * avg_weight, Weight))

# Remove the negative weights! Keep the ID's though because we also want to remove these from the full data set so that we don't inflate the total number of empty stomachs, because these are not empty
# TODO: Is this reasonable? To remove (93%), 685 rows because we have no way to estimate the total prey weight? And again... why are they 0 the weights...
ids_to_remove <- selected_prey_present_clean |> filter(Weight <= 0)

selected_prey_present_clean <- selected_prey_present_clean |> filter(Weight > 0)

ids_to_remove |> as.data.frame() |> distinct(Weight, prey_length, Count)

# TODO: really, can't be 0 count or 0 length or 0 weight... Has to be NA comon
```

With these estimates of weight based on either length or worst case, average weight of that prey, we need to drop 685 rows in the presence data (around 7%). Now calculate the total weight of these prey per individual predator stomach, and then pivot wider.

```{r}
selected_prey_present_summed <- selected_prey_present_clean |> 
  group_by(tblPredatorInformationID, common_prey_name) |> 
  summarise(tot_weight = sum(Weight)) |> 
  ungroup()

selected_prey_present_summed <- selected_prey_present_summed |> 
  pivot_wider(names_from = "common_prey_name", values_from = "tot_weight", values_fill = 0)
```

Here I need to set `values_fill = 0`. Because they are not `NA` but 0. This is just because I work with three species at the same time. Next I will `left_join` in the remaining predator information, and after that `bind_rows` "empty stomachs" (with respect to these 3 prey species). Since the IDs are not overlapping, it doesn't matter that I already have some 0's here for some species

```{r}
selected_prey_present_summed <- selected_prey_present_summed |> 
  left_join(pred, by = "tblPredatorInformationID") |> 
  drop_na(pred_length) # 167 predators exist only in the "select_prey_present_summed", because pred has filtered away regurgitated stomachs.. The reason they are in "selected_prey_present_summed" is because that dataframe comes from "d", which is left_join(prey, pred), and "prey" contains predator id's even though they have regurgitated stomachs, as shown above
```

Now add in the "empty stomachs" using bind_rows. When I `bind_rows`, the columns that are not matching get `NA`. The only column not matching should be the average weight columns. They will get `NA`, and I'll change it to 0.

```{r}
# I have two sets of empty stomachs at this point: empty for all prey, and empty with respect to sprat, herring and saduria.
# Because of the issue of getting prey weight even though they are present above, we need to make sure to drop these stomachs in the full data set also before joining, so that we don't treat them as empty!

# These are the totally empty stomachs
empty_stom |> distinct(tblPredatorInformationID) |> nrow()

# These are the empty stomachs with respect to sprat, herring, saduria
empty <- pred |>
  filter(!tblPredatorInformationID %in% unique(ids_to_remove$tblPredatorInformationID)) |> # First remove the stomachs that are not truly empty, but we can't estimate the total weight
  filter(!tblPredatorInformationID %in% c(selected_prey_present_summed$tblPredatorInformationID)) |> # Remove the ones that are not empty but in fact contain sprat, herring or saduria
  filter(!tblPredatorInformationID %in% c(empty_stom$tblPredatorInformationID)) # Remove the totally empty stomachs

empty |> distinct(tblPredatorInformationID) |> nrow()

unique(empty$pred_length)

# Bind rows!
dd <- selected_prey_present_summed |> 
  bind_rows(empty) |> 
  bind_rows(empty_stom)

unique(is.na(empty_stom$pred_length))
unique(is.na(empty$pred_length))
unique(is.na(selected_prey_present_summed$pred_length))
unique(is.na(dd$pred_length))
dd |> drop_na(pred_length)

# Yes, works as intended, see the added NAs in the selected prey weights. Make them 0!
unique(is.na(dd))

dd <- dd |> 
  mutate(sprat = replace_na(sprat, 0),
         herring = replace_na(herring, 0),
         saduria = replace_na(saduria, 0))
```

Now summarise and plot these data. First calculate the feeding ratio, which is the weight of prey over predator weight

```{r}
unique(is.na(dd$IndWgt))
min(dd$IndWgt, na.rm = TRUE)
dd |> distinct(IndWgt) |> arrange(IndWgt)
unique(is.na(dd$pred_length))

ggplot(dd, aes(IndWgt)) + 
  facet_wrap(~Year, scales = "free") +
  geom_histogram()

# TODO: What is going with Denmark? They report in kg
ggplot(dd, aes(IndWgt)) + 
  facet_wrap(~Country, scales = "free") + 
  geom_histogram()

# TODO: What is going with Sweden? They report in mm
ggplot(dd, aes(pred_length)) + 
  facet_wrap(~Country, scales = "free") + 
  geom_histogram()

dd <- dd |> 
  mutate(pred_length = ifelse(Country == "SE", pred_length/10, pred_length)) |> 
  mutate(IndWgt = ifelse(Country == "DK", IndWgt*1000, IndWgt))

# Check again
ggplot(dd, aes(IndWgt)) + 
  facet_wrap(~Country, scales = "free") + 
  geom_histogram()

ggplot(dd, aes(pred_length, fill = Country)) + 
  facet_wrap(~Country, scales = "free") + 
  geom_histogram()

# Estimate predator length if we got the predator length?
ggplot(dd, aes(pred_length, IndWgt)) + 
  geom_point()

dd <- dd |> 
  mutate(IndWgt = replace_na(IndWgt, 0),
         pred_weight_source = ifelse(IndWgt <= 0, "estimated", "observed"),
         IndWgt = ifelse(pred_weight_source == "estimated", 0.01*pred_length^3, IndWgt))

ggplot(dd, aes(pred_length, IndWgt, color = pred_weight_source)) + 
  geom_point()
```

Now calculate feeding ratios

```{r}
# Calculate feeding ratios
dd <- dd |> 
  mutate(FR_sad = saduria / IndWgt,
         FR_spr = sprat / IndWgt,
         FR_her = herring / IndWgt)

dd |> 
  dplyr::select(FR_sad, FR_spr, FR_her) |> 
  pivot_longer(everything()) |> 
  ggplot(aes(value)) +
  geom_histogram() +
  facet_wrap(~name, ncol = 1, scales = "free")

# Why are some so big? Could be due to either predator or prey weights. Hard to tell
t <- dd |> filter(FR_sad < 0.4)
t <- dd |> filter(FR_spr < 0.4)
t <- dd |> filter(FR_her < 0.4) 

dd |> filter(FR_her > 1) |> as.data.frame()

dd <- dd |>
  filter(FR_spr < 0.5) |> 
  filter(FR_her < 0.5) |> 
  filter(FR_sad < 0.5)
```

Check the proportion of stomachs without these prey

```{r}
dd %>% 
  pivot_longer(c("herring", "saduria", "sprat")) |> 
  group_by(name) |> 
  summarise(prop_empty = sum(value == 0)/n(), 
            prop_not_empty = sum(value != 0)/n())
```

Seems like fairly high proportions of cod without these key species in stomachs, but again, this is just from memory.

Now add in Stefan Neuenfeldts data, add in and remove duplicates

```{r}
old <- read_csv(paste0(home, "/data/clean/stefan_stomachs.csv")) |> 
  dplyr::select(FR_sad, FR_spr, FR_her, X, Y, year, month, day, pred_weight, pred_size, saduria, sprat, herring,
                lat, lon, square, stom_id) |>
  rename(ices_rect = square, 
         pred_length = pred_size) |> 
  drop_na(FR_sad) |> 
  drop_na(FR_spr) |> 
  drop_na(FR_her) |> 
  drop_na(pred_weight)

names(old)
old$stom_id # TODO: careful here, there are NA's in the column that calculates the id, so they might be different fish actually

names(dd)

# Fix some columns in the main data before merging
dd <- dd |> 
  rename(lon = ShootLong,
         lat = ShootLat) |>
  janitor::clean_names() |>
  rename(ices_rect = ice_srectangle, 
         FR_spr = fr_spr,
         FR_her = fr_her,
         FR_sad = fr_sad,
         pred_weight = ind_wgt) |> 
  mutate(month = as.character(month),
         day = as.character(day)) |> 
  add_utm_columns(ll_names = c("lon", "lat"), utm_crs = 32633) |> 
  dplyr::select(FR_sad, FR_spr, FR_her, X, Y, year, month, day, pred_weight, pred_length,
                saduria, sprat, herring, lat, lon, ices_rect, depth)

# are there new data in the old period that is not in stefans data?
new_old <- dd |> filter(year < 2017)

new_old <- new_old |> mutate(sample_id = paste(year, month, day, ices_rect, sep = "_"))

old <- old |> mutate(sample_id = paste(year, month, day, ices_rect, sep = "_"))

new_old <- new_old |> filter(!sample_id %in% unique(old$sample_id)) |> as.data.frame()

# Make full dataset
df <- bind_rows(old, new_old, dd)
```

```{r}
#| out-width: 100%
# Add sample size per coordinate for plotting
dd_plot <- df |>
  group_by(year, X, Y) |> 
  mutate(sample_size = n(),
         pos_id = paste(year, X, Y)) |> 
  ungroup() |> 
  distinct(pos_id, .keep_all = TRUE)
  
plot_map_fc +
  geom_point(data = dd_plot, aes(X*1000, Y*1000, size = sample_size), alpha = 0.5) +
  facet_wrap(~ year, ncol = 6) +
  #theme_sleek(base_size = 6) + 
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) +
  scale_size(range = c(.01, 2), name = "# stomachs") +
  geom_sf()

ggsave(paste0(home, "/figures/supp/year_diet_map.pdf"), width = 15, height = 15, units = "cm")
```

Add depth

```{r}
dep_raster <- terra::rast(paste0(home, "/data/Mean depth natural colour (with land).nc"))
class(dep_raster)
crs(dep_raster, proj = TRUE)

plot(dep_raster)

df$depth <- terra::extract(dep_raster, df |> dplyr::select(lon, lat))$elevation

ggplot(df, aes(lon, lat, color = depth*-1)) + 
  geom_point()

df$depth <- df$depth*-1

# TODO: these coordinates are waaay off
df <- df |> drop_na(depth)

df |> 
  ggplot(aes(X*1000, Y*1000, color = depth)) + 
  geom_point() +
  NULL

hist(df$depth)

plot_map_fc +
  geom_point(data = df, aes(X*1000, Y*1000, color = depth), alpha = 0.5) +
  theme_sleek(base_size = 6) + 
  geom_sf()

ggplot(df, aes(lon, lat, color = depth)) + 
  geom_point() + 
  coord_sf()
```

See to TODO-list in code, and also: at which stage do I filter empty stomachs? Now it's just if they aren't present in the prey data, but there's a lot of processing and maybe I should filter later to not inflate the 0's...

```{r}
# Save data
write_csv(dd, paste0(home, "/data/clean/stomachs.csv"))
```

```{r}
#| echo: false
#| eval: false
renderthis::to_pdf(paste0(here::here(), "/R/prepare-data/01-test-prepare-stomach-data.html"))
```