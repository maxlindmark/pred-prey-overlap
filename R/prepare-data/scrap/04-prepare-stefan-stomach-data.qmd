---
title: "Prepare stomach content data"
author: "Max Lindmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
    fig-width: 4
    #fig-asp: 0.618
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Load libraries

```{r libs}
#| message: false
#| warning: false
library(tidyverse)
library(tidylog)
library(janitor)
library(devtools)
library(sdmTMB)
library(mapplots)

# Import some plotting functions
# Source code for map plots
# You need: # devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/maxlindmark/pred-prey-overlap/main/R/functions/map-plot.R")
options(ggplot2.continuous.colour = "viridis")

# Set path
home <- here::here()
```

## Read data

Sent from Nis as a backup to the ICES data base updated in SCINEA SC10

```{r}
#| warning: false
#| message: false
pred <- read_delim(paste0(home, "/data/stomach/predator_table.txt"))
prey <- read_delim(paste0(home, "/data/stomach/prey_table.txt"))
```

```{r read data}
pred <- read_delim(paste0(home, "/data/stomach/predator_table.txt"))
prey <- read_delim(paste0(home, "/data/stomach/prey_table.txt"))

# Join the predator information to the prey data
intersect(colnames(pred), colnames(prey))

d <- prey |>
  left_join(pred) |>
  filter(Year > 1992) |>
  as.data.frame() |> 
  mutate_at(c("Prey_size", "Prey_weight", "Prey_nr", "latPosStartDec", "lonPosStartDec", "Pred_size", "Pred_weight"),
            as.numeric)

str(d)
```

Next we need to summarize our prey weights by predator and prey group. First filter stomachs where these prey are present. Create a new common name column to make life easier... 

```{r}
names(d)

unique(d$prey_sp)

selected_prey_present <- d |> 
  filter(prey_sp %in% c("Sprattus sprattus", "Clupea harengus", "Saduria entomon"))
```

Check how many predators have these prey in stomachs

```{r}
#| message: false
length(unique(selected_prey_present$stomID))
length(unique(d$stomID))

length(unique(selected_prey_present$stomID)) / length(unique(d$stomID))
```

# Replace NA weights with estimated weights based on length, and drop the rest

```{r}
# First find out which unit length is in
unique(selected_prey_present$Length_code)

ggplot(selected_prey_present, aes(Prey_size, fill = Length_code)) + 
  geom_histogram() +
  facet_wrap(~prey_sp, scales = "free_y", ncol = 1)

# Hmm, this is totally weird. Looks like cm if NULL in herring and sprat, but in Saduria it must be mm if NULL

selected_prey_present <- selected_prey_present |> 
  mutate(Prey_size = ifelse(prey_sp == "Clupea harengus" & Length_code == "NULL", Prey_size*10, Prey_size),
         #Prey_size = ifelse(prey_sp == "Saduria entomon" & Length_code == "NULL", Prey_size*10, Prey_size),
         Prey_size = ifelse(prey_sp == "Sprattus sprattus" & Length_code == "NULL", Prey_size*10, Prey_size))

ggplot(selected_prey_present, aes(Prey_size, fill = Length_code)) + 
  geom_histogram() +
  facet_wrap(~prey_sp, scales = "free_y", ncol = 1)

ggplot(selected_prey_present |> filter(Prey_size < 750), aes(Prey_size, fill = Length_code)) + 
  geom_histogram() +
  facet_wrap(~prey_sp, scales = "free_y", ncol = 1)

# This is now in mm

unique(is.na(selected_prey_present$Prey_weight))
min(selected_prey_present$Prey_weight, na.rm = TRUE)

# Do they have a length? Can we estimate Weight? If length is not `NA` and Weight is 0, estimate weight based on length and multiply with the count of prey. Else give weight `NA` and drop it.
selected_prey_present <- selected_prey_present |> 
  mutate(weight_source = ifelse(is.na(Prey_weight) & !is.na(Prey_size), "estimated", "observed")) |> 
  mutate(Prey_weight = ifelse(weight_source == "estimated", (0.01*(Prey_size/10)^3), Prey_weight))

selected_prey_present <- selected_prey_present |> drop_na(Prey_weight)

selected_prey_present |> 
  filter(prey_sp == "Sprattus sprattus") |> 
  ggplot(aes(Prey_size, fill = Length_code)) + 
  geom_histogram() 
```

Now calculate the total weight of these prey per individual predator stomach, and then pivot wider.

```{r}
selected_prey_present_summed <- selected_prey_present |> 
  group_by(stomID, prey_sp) |> 
  summarise(tot_weight = sum(Prey_weight)) |> 
  ungroup()

selected_prey_present_summed <- selected_prey_present_summed |> 
  pivot_wider(names_from = "prey_sp", values_from = "tot_weight", values_fill = 0)
```

Next I will `left_join` in the remaining predator information, and after that `bind_rows` "empty stomachs" (with respect to these 3 prey species). Since the IDs are not overlapping, it doesn't matter that I already have some 0's here for some species

```{r}
selected_prey_present_summed <- selected_prey_present_summed |> 
  left_join(selected_prey_present, by = "stomID")
```

Now add in the "empty stomachs" using bind_rows. When I `bind_rows`, the columns that are not matching get `NA`. The only column not matching should be the average weight columns. They will get `NA`, and I'll change it to 0.

```{r}
empty <- d |> filter(!stomID %in% c(selected_prey_present_summed$stomID))

dd <- bind_rows(selected_prey_present_summed, empty)

# Yes, works as intended, see the added NAs in the selected prey weights. Make them 0!
dd <- dd |> 
  rename(herring = `Clupea harengus`,
         sprat = `Sprattus sprattus`,
         saduria = `Saduria entomon`) |> 
  mutate(saduria = ifelse(is.na(saduria), 0, saduria),
         herring = ifelse(is.na(herring), 0, herring),
         sprat   = ifelse(is.na(sprat), 0, sprat))
```

Trim the data a bit!

```{r}
dd <- dd |> 
  mutate(lat = latPosStartDec,
         lon = lonPosStartDec,
         lat = ifelse(lat < 54, ices.rect(square)$lat, lat),
         lon = ifelse(lon < 54, ices.rect(square)$lon, lon),
         lat = ifelse(is.na(lat), ices.rect(square)$lat, lat),
         lon = ifelse(is.na(lon), ices.rect(square)$lon, lon)) |> 
  drop_na(lon) |> 
  drop_na(lat) |> 
  janitor::clean_names() |> 
  mutate(pred_weight_source = ifelse(is.na(pred_weight) & !is.na(pred_size), "estimated", "observed")) |> 
  mutate(pred_weight = ifelse(pred_weight_source == "estimated", (0.01*(pred_size/10)^3), pred_weight)) #|> 
  #dplyr::select(year, quarter, lat, lon, lat_pos_start_dec, lon_pos_start_dec, pred_weight, pred_size, length_code, pred_weight_source, saduria, herring, sprat)

sort(unique(dd$year))

glimpse(dd)

# Ok, now summarise and plot these data. First calculate the feeding ratio, which is the weight of prey over predator weight
ggplot(dd, aes(pred_weight)) + 
  geom_histogram()

# Good, no NAs and all positive weight values. Calculate feeding ratios
dd <- dd |> 
  mutate(FR_sad = saduria / pred_weight,
         FR_spr = sprat / pred_weight,
         FR_her = herring / pred_weight)
```

Quick quality check

```{r}
ggplot(dd, aes(pred_weight, fill = pred_weight_source)) + 
  geom_histogram()

ggplot(dd, aes(pred_weight/1000, fill = pred_weight_source)) + 
  geom_histogram()

ggplot(dd, aes(pred_size, fill = length_code)) + 
  geom_histogram()

ggplot(dd, aes(pred_size/10, pred_weight/10, color = length_code)) + 
  geom_point() + 
  facet_wrap(~year)

dd |>
  filter(FR_sad < 0.3) |> 
  ggplot(aes(FR_sad)) + 
  geom_histogram() +
  #facet_wrap(~year) +
  NULL
  
dd |>
  filter(FR_spr < 0.3) |> 
  ggplot(aes(FR_spr)) + 
  geom_histogram() +
  #facet_wrap(~year) +
  NULL

dd |>
  filter(FR_her < 0.3) |> 
  ggplot(aes(FR_her)) + 
  geom_histogram() +
  #facet_wrap(~year) +
  NULL

# Don't bother with these outliers, just filter
tt <- dd |>
  filter(FR_sad > 0.3) |> # FR_spr > 0.3 FR_her > 0.3) |>
  as.data.frame()

tt

prey |> filter(stomID == "2012_11_5_81_DANA2_41G7_1_F_400_554_1") # ????????

dd <- dd |> filter(FR_sad < 0.3 & FR_spr < 0.3 & FR_her < 0.3)
```

Check the proportion of stomachs without these prey. TODO: too late to figure out how to do this but overall it seems low... 

```{r}
dd %>% 
  pivot_longer(c("herring", "saduria", "sprat")) |> 
  group_by(name) |> 
  summarise(prop_empty = sum(value == 0)/n(), 
            prop_not_empty = sum(value != 0)/n())
```

Add UTM coords

```{r}
# Inspect spatiotemporal resolution of feeding ratio
dd <- dd |> add_utm_columns(ll_names = c("lon", "lat"), utm_crs = 32633)
```

Seems like fairly high proportions of cod without these key species in stomachs, but again, this is just from memory.

```{r}
#| out-width: 100%
# Add sample size per coordinate for plotting
dd_plot <- dd |>
  group_by(year, X, Y) |> 
  mutate(sample_size = n(),
         pos_id = paste(year, X, Y)) |> 
  ungroup() |> 
  distinct(pos_id, .keep_all = TRUE)
  
plot_map_fc +
  geom_point(data = dd_plot, aes(X*1000, Y*1000, size = sample_size), alpha = 0.5) +
  facet_wrap(~ year, ncol = 5) +
  theme_sleek(base_size = 6) + 
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90)) +
  scale_size(range = c(.01, 2), name = "# stomachs") +
  labs(title = "Cod stomachs in space") +
  geom_sf()
```

```{r}
# Save new data
write_csv(dd, paste0(home, "/data/clean/stefan_stomachs.csv"))
```

